Left-shift:
left-shifting an integer “a” with an integer “b” denoted as ‘(a<<b)’ is equivalent to multiplying a with 2^b (2 raised to power b). 
a = 5 === 0101
b = 2 

- 101 << 2
- 10100
- a << b = 20

Right-shift:
right-shifting an integer “a” with an integer “b” denoted as ‘(a>>b)‘ is equivalent to dividing a with 2^b. 
 a >> b
a = 5 === 0101
b = 2 
0101 >> 2 = 1

1. The left-shift and right-shift operators should not be used for negative numbers. 
The result of is undefined behavior if any of the operands is a negative number. For example results of both 1 >> -1 and 1 << -1 is undefined.

2. If the number is shifted more than the size of the integer, the behavior is undefined. 
For example, 1 << 33 is undefined if integers are stored using 32 bits. 
For bit shift of larger values 1ULL<<62  ULL is used for Unsigned Long Long which is defined using 64 bits that can store large values.

3. The left-shift by 1 and right-shift by 1 are equivalent to the product of the first term and 2 to the power given element(1<<3 = 1*pow(2,3))
and division of the first term and second term raised to power 2 (1>>3 = 1/pow(2,3)) respectively. 
